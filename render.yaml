services:
  # ------------------------------------------------
  # 1) PostGIS Container (Private Service)
  # ------------------------------------------------
  - name: postgis-db
    type: postgres
    env: docker
    dockerfilePath: ./Dockerfile.postgis

    # Optional health check to confirm Postgres is up:
    healthCheckCommand: ["pg_isready", "-h", "0.0.0.0", "-p", "5432", "-U", "postgres"]

    envVars:
      - key: POSTGRES_USER
        value: postgres
      - key: POSTGRES_PASSWORD
        value: postgres
      - key: POSTGRES_DB
        value: postgres

    # Use a Render Disk so data persists across deploys:
    disks:
      - name: postgis_disk
        mountPath: /var/lib/postgresql/data
        sizeGB: 5

    # The port exposed internally in your Dockerfile.postgis is 5432.
    # Render will map that automatically within the private service.

  # ------------------------------------------------
  # 2) Django Web Service
  # ------------------------------------------------
  - name: pharmacy-on-duty-web
    type: web
    env: docker
    dockerfilePath: ./Dockerfile
    
    # Override the default CMD from Dockerfile with Gunicorn in production:
    startCommand: gunicorn PharmacyOnDuty.wsgi:application --bind 0.0.0.0:8000

    envVars:
      # Typical Django settings
      - key: DEBUG
        value: "False"
      - key: ALLOWED_HOSTS
        value: "pharmacyonduty.onrender.com"  # Update with your Render domain
      
      # Database connection info (point to your private service)
      - key: DB_NAME
        value: "postgres"
      - key: DB_USER
        value: "postgres"
      - key: DB_PASSWORD
        value: "postgres"
      - key: DB_HOST
        fromService:
          name: postgis-db       # references the privateService defined above
          property: host
      - key: DB_PORT
        value: "5432"